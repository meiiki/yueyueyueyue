1.git指令
  1)git仓库的状态与区域
    3个区域:
      工作区:工作的区域,我们用于写作代码的空间
      暂存区:
      当前HEAD指向的分支:
    4个状态:
      1.unmodified:工作区以及暂存中没有任何需要提交的修改,工作区很干净
      2.untracked:仓库中有新建的文件,但是还没有提交过,没有被纳入到git的控制之中
      3.modified:有文件被修改,但是还没有提交到暂存区
      4.stage:工作区的修改已经被提交到了暂存区,即:已经执行过git add命令,正在等待被提交到master
  2)撤销修改
    1.撤销工作区的修改
       git checkout -- 文件名
      文件被修改以后,没有被执行git add指令
    2.撤销暂存区的修改
      文件已经被修改,并且已经执行过git add,但是还没有git commit
      2 step:
        撤销暂存操作:
          git reset HEAD 文件名
        撤销工作区的修改
          git checkout -- 文件名
    3.撤销master的修改
      无法撤销,可以通过版本回退的方式
      撤销前,先查看提交的id,确定需要会退到哪个版本
      git reset --hard 提交的idg
  3)查看提交信息/存盘点
    git log
    git log --pretty=oneline
  
  4)关于存盘点(HEAD)
    实现版本的控制
      git中吧每一次的提交都会传承一条时间线,这个时间线就是一条分支,默认只有一条分支master,也称之为主分支.
      二HEAD指向的就是当前分支.
  5)分支
    1.创建分支
      git branch 分支名
      将当前所在的分支复制一条新的分支出来
    2.查看当前所有分支
      git branch
      其中前面有*的表示当前所在分支
    3.切换分支
      git checkout 分支名称
      在分支上的操作,不会影响其他分支上的数据
    4.合并分支
      git merge 分支名称
      将制定名称的分支的内容合并到当前分支
      eg:
        在master分支下使用 git merge v1
        将v1分支内容合并到master中,
        master分支的内容发生改变,v1分支的内容不改变
    5.删除分支
      git branch -d 分支名称
        删除制定分支(不能删除当前所在分支)

      git branch -D 分支名称
        强制删除未合并的分支
2.GitHub的使用
  https://github.com
  远程仓库
  1)注册登录
  2)新建远程仓库
    
  3)关联本地/远程仓库
    git remote add origin 远程仓库地址.git
      origin:表示一个变量名,方便后续操作的使用,指代后面的  远程仓库地址.git  这个地址
      add: 表示添加关联
  4)将本地仓库的内容推送给远程仓库
    git push -u origin master 
      -u:只在第一次推送的时候添加,以后推送不需要再添加了告诉远程仓库,创建一个master分支
      ./.origin:关联本地于远程仓库时气的一个别名,指代远程仓库的地址,关联是,可以起其他的别名,不一定是origin
  5)删除远程仓库
    setting---->Danger Zone

  6)删除本地仓库与远程仓库之间的关联
    git remote remove origin

密钥
-
私钥    公钥
  练习:
    1.在d盘下新建test文件夹,初始化本地仓库
    2.新建文件1.txt,提交
    3.修改1.txt的内容,查看仓库的状态有什么变化,并提交
    4.新建文件2.txt,查看仓库的变化,提交
    5.修改2.txt内容,提交
    6,修改1.txt内容,查看状态,撤销1.txt的修改
    7.修改2.txt内容,并提交到暂存区,查看状态后,撤销2.txt的修改
    8.修改1.txt,2.txt的内容,然后提交,add.commit
    9.查看提交的信息,存盘点
    10.将仓库的内容回退到第四步


